import sys
import os
import time

import gensim
import pickle

import datatime
import numpy as np
import multiprocessing as mp



malware_train_docs = dict()
malware_test_dir_1 = 'fold_6_after'
malware_test_dir_2 = 'fold_4_test'
all_malware_dir = 'parsed_malware_slow_method_before'
fold = 'fold_6_after_4'

for root, dirs, filenames in os.walk(all_malware_dir):
        for malware in filenames:
                malware_train_docs[malware] = open(os.path.join(root, malware), 'rb').read().splitlines()


vocabulary = []
for malware in malware_train_docs:
        vocabulary.append(malware_train_docs[malware])


#alg = int(sys.argv[1])
#win = int(sys.argv[2])
alg = 1
win = 5
model = gensim.models.Word2Vec(vocabulary, workers=8, sg=alg, window=win, min_count=1)
print('vocabulary size  =  ' + str(len(model.wv.vocab)))
print('algorithm  =  ' + str(model.sg))
print('window size  =  ' + str(model.window))

print('calculating distances...\n')
start = time.time()

distances = dict()
bad_malwares = []

# remove test files (test_files_2) from all files
all_filenames = os.listdir(all_malware_dir)
test_filenames = os.listdir(malware_test_dir_2)
train_filenames = []
for file in all_filenames:
    flag = 1
    for test in test_filenames:
        if file == test:
            flag = 0
            break
    if flag == 1:
        train_filenames.append(file)
#print(len(all_filenames))
#print(len(test_filenames))
#print(len(train_filenames))



for root, dirs, filenames in os.walk(malware_test_dir_1):
    for test_malware in filenames:
        if test_malware in bad_malwares:
                continue
        malware_test_doc = open(os.path.join(root, test_malware), 'r').read().splitlines()
        distances[test_malware] = dict()

        train_malwares = train_filenames[:]

        for malware in train_malwares:
                if malware in bad_malwares:
                        continue
                try:
                        distance = model.wmdistance(malware_train_docs[malware], malware_test_doc)
                        distances[test_malware][malware] = distance
                except UnicodeDecodeError as err:
                        if err.object in malware_train_docs[malware]:
                                bad_malwares.append(malware)
                        else:
                                bad_malwares.append(test_malware)
        print('finished calculating distances for ' + test_malware)
end = time.time()
print("calculate distances take off %.4f s" % (end - start))

## write distances dictionary to file
with open(fold + '_distances_win' + str(win) + '_sg' + str(alg) + '.pickle', 'wb') as handle:
        pickle.dump(distances, handle, protocol=pickle.HIGHEST_PROTOCOL)
