"""Train the model"""

import argparse
import os
import pathlib
import shutil

import numpy as np
#import tensorflow as tf
import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()
#from tensorflow.contrib.tensorboard.plugins import projector
from tensorboard.plugins import projector

import malware_dataset as mnist_dataset
from utils import Params
from input_fn import test_input_fn
from model_fn import model_fn

import matplotlib.pyplot as plt


parser = argparse.ArgumentParser()
parser.add_argument('--model_dir', default='experiments/',
                    help="Experiment directory containing params.json")
parser.add_argument('--data_dir', default='data/mnist',
                    help="Directory containing the dataset")
parser.add_argument('--sprite_filename', default='experiments/malware_sprite.png',
                    help="Sprite image for the projector")

os.environ['CUDA_VISIBLE_DEVICES'] = '0'

if __name__ == '__main__':
    tf.reset_default_graph()
    tf.logging.set_verbosity(tf.logging.INFO)

    # Load the parameters from json file
    args = parser.parse_args()
    json_path = os.path.join(args.model_dir, 'params.json')
    assert os.path.isfile(json_path), "No json configuration file found at {}".format(json_path)
    params = Params(json_path)



    LOG_DIR = os.path.join(args.model_dir, "eval")
    path_for_mnist_sprites = os.path.join(LOG_DIR, 'malware_sprite.png')
    path_for_mnist_metadata = os.path.join(LOG_DIR, 'malware_metadata.tsv')



    # Define the model
    tf.logging.info("Creating the model...")
    config = tf.estimator.RunConfig(tf_random_seed=230,
                                    model_dir=args.model_dir,
                                    save_summary_steps=params.save_summary_steps)
    estimator = tf.estimator.Estimator(model_fn, params=params, config=config)


    # EMBEDDINGS VISUALIZATION

    # Compute embeddings on the test set
    tf.logging.info("Predicting")
    predictions = estimator.predict(lambda: test_input_fn(args.data_dir, params))
    

    # TODO (@omoindrot): remove the hard-coded 10000
    embeddings = np.zeros((params.eval_size, params.embedding_size))
    for i, p in enumerate(predictions):
        embeddings[i] = p['embeddings']
        # if(i==0):
        #     print(p['embeddings'])
        #     print(embeddings[i]) ： 第 i 个测试样本的预测向量，64维


    tf.logging.info("Embeddings shape: {}".format(embeddings.shape))

    # Visualize test embeddings
    embedding_var = tf.Variable(embeddings, name='malware_embedding')

    eval_dir = os.path.join(args.model_dir, "eval")
    summary_writer = tf.summary.FileWriter(eval_dir)


    # 加的东西 - 111
    def create_sprite_image(images):
        """Returns a sprite image consisting of images passed as argument. Images should be count x width x height"""
        if isinstance(images, list):
            images = np.array(images)
        img_h = images.shape[1]
        img_w = images.shape[2]
        n_plots = int(np.ceil(np.sqrt(images.shape[0])))

        spriteimage = np.ones((img_h * n_plots, img_w * n_plots))

        for i in range(n_plots):
            for j in range(n_plots):
                this_filter = i * n_plots + j
                if this_filter < images.shape[0]:
                    this_img = images[this_filter]
                    spriteimage[i * img_h:(i + 1) * img_h,
                    j * img_w:(j + 1) * img_w] = this_img

        return spriteimage


    # 加的东西 - 111
    def vector_to_matrix_mnist(mnist_digits):
        """Reshapes normal mnist digit (batch,28*28) to matrix (batch,28,28)"""
        return np.reshape(mnist_digits, (-1, 8, 8))  


    # 加的东西 - 111
    def invert_grayscale(mnist_digits):
        """ Makes black white, and white black """
        return 1 - mnist_digits



    config = projector.ProjectorConfig()
    embedding = config.embeddings.add()
    embedding.tensor_name = embedding_var.name



    # Specify where you find the metadata
    embedding.metadata_path = 'malware_metadata.tsv'  # 'metadata.tsv'


    # Specify where you find the sprite (we will create this later)
    embedding.sprite.image_path = 'malware_sprite.png'  # 'mnistdigits.png'
    embedding.sprite.single_image_dim.extend([24, 24])


    # Say that you want to visualise the embeddings
    projector.visualize_embeddings(summary_writer, config)




    sess = tf.InteractiveSession()
    sess.run(tf.global_variables_initializer())

    saver = tf.train.Saver()
    saver.save(sess, os.path.join(eval_dir, "embeddings.ckpt"), 1)



    to_visualise = embeddings
    to_visualise = vector_to_matrix_mnist(to_visualise)
    to_visualise = invert_grayscale(to_visualise)

    sprite_image = create_sprite_image(to_visualise)

    plt.imsave(path_for_mnist_sprites, sprite_image, cmap='gray')
    #plt.imshow(sprite_image, cmap='gray')



    with tf.Session() as sess:
        # TODO (@omoindrot): remove the hard-coded 10000
        # Obtain the test labels
        dataset = mnist_dataset.test(args.data_dir)
        dataset = dataset.map(lambda img, lab: lab)
        dataset = dataset.batch(params.eval_size)
        labels_tensor = dataset.make_one_shot_iterator().get_next()
        labels = sess.run(labels_tensor)


    with open(path_for_mnist_metadata, 'w') as f:
        f.write("Index\tLabel\n")
        for index, label in enumerate(labels):
            f.write("%d\t%d\n" % (index, label))

