import numpy
import scipy.misc
import os
import array


# Determine if a file is a PE file (can also handle .bytes files)
def is_exe(input_file):
    ext = os.path.splitext(os.path.basename(input_file))[1]
    print('ext = ', ext)
    result = False
    if '.exe' or '.dll' == ext:
        result = True
    return result

# Generate an image and save it
def generate_and_save_image(input_dir, output_dir, filename):
    out_file = os.path.splitext(os.path.basename(filename))[0] + '.png'
    out_file_full = output_dir + out_file
    input_file_path = os.path.join(input_dir, filename)
    print("out_file_full: ", out_file_full)
    if is_exe(filename):
        f = open(input_file_path, 'rb')
        ln = os.path.getsize(input_file_path)        # Length of file in bytes

        # Generate images of different fixed widths depending on the file size
        if ln < (10*k):
            width = 32
        elif ln>=(10*k) and ln<(30*k):
            width = 64
        elif ln>=(30*k) and ln<(60*k):
            width = 128
        elif ln>=(60*k) and ln<(100*k):
            width = 256
        elif ln>=(100*k) and ln<(200*k):
            width = 384
        elif ln>=(200*k) and ln<(500*k):
            width = 512
        elif ln>(500*k) and ln<(1000*k):
            width = 768
        elif ln>(1000*k):
            width = 1024
        rem = ln % width

        a = array.array("B")  # Uint8 array
        a.fromfile(f, ln - rem)
        f.close()
        g = numpy.reshape(a, (len(a) // width, width))
        g = numpy.uint8(g)
        scipy.misc.imsave(out_file_full, g)  # Save the image
    else:
        print("not exe or dll file")

def convert_bin_to_img(input_dir, output_dir):
    if not os.path.isdir(input_dir):
        print(input_dir, 'Input directory not found. Exiting.')
        exit(0)
    if not os.path.isdir(output_dir):
        os.mkdir(output_dir)
    count = 0
    files = os.listdir(input_dir)
    print(files)
    for filename in files:
        print("filename: ", filename)
        try:
            generate_and_save_image(input_dir, output_dir, filename)
            print(filename)
            count += 1
            print(count)
            if number_of_samples == count:
                exit(0)
        except:
             print('Ignoring', filename)


if __name__ == '__main__':
    number_of_samples = 20000    # The maximum number of malware that can be handled
    k = 1024

    convert_bin_to_img("BIG-15", "gray-images/")