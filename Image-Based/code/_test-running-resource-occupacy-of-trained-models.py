# How to load and use weights from a checkpoint
from keras.models import Sequential
from keras.layers import Dense
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import keras
import os
import os.path
import glob
import csv

from sklearn.metrics import accuracy_score, classification_report

np.random.seed(1)

from keras.preprocessing import image
from keras.preprocessing.image import img_to_array
from keras.applications.imagenet_utils import preprocess_input

from keras.models import Sequential, Model
from keras.models import load_model
from keras.optimizers import RMSprop, SGD
from time import sleep

os.environ['CUDA_VISIBLE_DEVICES'] = '2'
test_dir = '/home/mayixuan/mal-visual/ttt/'


filenames = os.listdir(test_dir)
test_num = len(filenames)


def preprocess_input(x):
    x /= 255.
    x -= 0.5
    x *= 2.
    return x

# 读入测试集
width, height, channels = (224, 224, 3)
X = np.zeros((test_num, width, height, channels))
cnt = 0
for file in filenames:
    img = image.load_img(test_dir + file, target_size=(224, 224))
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)
    X[cnt] = x
    cnt += 1

print("Test Files processed: %d" %(cnt))



# Process lables

y = []

with open('/home/mayixuan/mal-visual/trainLabels.csv', 'r') as f:
    reader = csv.reader(f)
    name = [row[0] for row in reader]   # 文件md5或sha_256
    f.close()

with open('/home/mayixuan/mal-visual/trainLabels.csv', 'r') as f:
    reader = csv.reader(f)
    label = [row[1] for row in reader]  # 标签（要与训练时标签相对应）



for file in filenames:
    first_name = os.path.splitext(os.path.basename(file))[0]
    for i in range(len(name)):
        if first_name == name[i]:
            y.append(int(label[i])-1)

print("Test Files label processed: %d" % (len(y)))

#optimizer=keras.optimizers.SGD(lr=5e-6, momentum=0.9)
# create model
trained_model = load_model('/home/mayixuan/mal-visual/model-size/Save Entire Model/IMCFN-fromscratch.h5')
trained_model.compile(loss='categorical_crossentropy', optimizer='adam',
                metrics=['accuracy'])
print("Created model and loaded weights from file")
sleep(4)


# estimate accuracy on test dataset using loaded model
y_prob = trained_model.predict(X, verbose=1)  # Testing
y_pred = np.argmax(y_prob, axis=1)


print(classification_report(y, y_pred, digits=4))
#print(y)
#print(y_pred)
