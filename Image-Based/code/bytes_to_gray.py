import os
import numpy as np
import scipy.misc




number_of_samples = 10868
k = 1024




def is_bytes(input_file):
    ext = os.path.splitext(os.path.basename(input_file))[1]
    print('ext = ', ext)
    result = False
    if '.bytes' == ext:
        result = True
    return result

#def saveimg(array,name):
#    print(name)
#    if array.shape[1]!=16:
#        assert(False)
#    b=int((array.shape[0]*16)**(0.5))
#    b=2**(int(log(b)/log(2))+1)
#    a=int(array.shape[0]*16/b)
#    #print a,b,array.shape
#    array=array[:int(a*b/16),:]
#    array=np.reshape(array,(a,b))
#    #print array.shape
#    im = Image.fromarray(np.uint8(array))
#    im.save('image/'+name+'.jpg', "JPEG")


# 将byte_value这个一维数组转换为灰度图
def generate_and_save_image(input_dir, output_dir, filename):
    out_file = os.path.splitext(os.path.basename(filename))[0] + '.png'  # 决定输出图片是.png格式还是.jpg格式
    out_file_full = output_dir + out_file
    input_file_path = os.path.join(input_dir, filename)
    print("out_file_full: ", out_file_full)
    if is_bytes(filename):

        f = open(input_file_path)
        byte = []

        for line in f:
            xx = line.split()  # 对每行，按制表符切割字符串，得到的结果构成一个数组，数组的每个元素代表一行中的一列，xx为一行的数组有17个元素
            if len(xx) != 17:
            #if len(xx) != 16:
                continue
            byte.append([int(i, 16) if i != '??' else 0 for i in xx[1:]])  # 将后16列转换为0-255的数字，??置为0
            # 这里认为FF就是？？
            #byte.append([int(i, 16) if i != 'FF' else 0 for i in xx])

        byte_value = (np.array(byte)).flatten()  # 将高维数组n行*16列，平整化为一维数组
        #print(byte_value)
        #print(len(byte_value))

        ln = len(byte_value)  # .bytes文件的总字节数，前面除去了不满17列的最后一行
        #print(f.read())

        # 根据文件大小生成不同固定宽度的图片
        #if ln < (10 * k):
        #    width = 32
        #elif ln >= (10 * k) and ln < (30 * k):
        #    width = 64
        #elif ln >= (30 * k) and ln < (60 * k):
        #    width = 128
        #elif ln >= (60 * k) and ln < (100 * k):
        #    width = 256
        #elif ln >= (100 * k) and ln < (200 * k):
        #    width = 384
        #elif ln >= (200 * k) and ln < (500 * k):
        #    width = 512
        #elif ln > (500 * k) and ln < (1000 * k):
        #    width = 768
        #elif ln > (1000 * k):
        #    width = 1024
        width = 256
        rem = ln % width


        if rem != 0:
            byte_value = byte_value[0:(-rem)]
        print(len(byte_value))
        f.close()
        g = np.reshape(byte_value, (len(byte_value) // width, width))
        # print(g.shape)
        g = np.uint8(g)
        # print("g: ", g)
        scipy.misc.imsave(out_file_full, g)  # save the image (环境 ：scipy 1.1.0)
    else:
        print("not bytes")
    del byte, byte_value


def convert_bin_to_img(input_dir, output_dir):
    if not os.path.isdir(input_dir):
        print(input_dir, 'Input directory not found. Exiting.')
        exit(0)
    if not os.path.isdir(output_dir):
        os.mkdir(output_dir)
    count = 0
    files = os.listdir(input_dir)
    print(files)
    for filename in files:
        print("filename: ", filename)
        try:
            generate_and_save_image(input_dir, output_dir, filename)
            print(filename)
            count += 1
            print(count)
            if number_of_samples == count:
                exit(0)
        except:
             print('Ignoring ', filename)


if __name__ == '__main__':
    convert_bin_to_img("F:/yixuan/malware/malware-visualization/tete/", "tbtb/")

