import os
import os.path
import glob
import time
from time import sleep
import keras
import csv
import numpy as np
import pandas as pd


import tensorflow as tf
from tensorflow import keras



from sklearn.model_selection import StratifiedKFold, train_test_split
from sklearn.metrics import accuracy_score, classification_report,confusion_matrix
from sklearn.preprocessing import LabelEncoder
from keras.utils import np_utils, plot_model


np.random.seed(1)

from malconv import Malconv
from preprocess import preprocess
import utils

from keras.models import load_model, Sequential
from keras.optimizers import Adam, SGD
from keras.callbacks import ModelCheckpoint, EarlyStopping

import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
import argparse



os.environ['CUDA_VISIBLE_DEVICES'] = '2'
test_dir = '/home/mayixuan/malconv/ttt/'


filenames = os.listdir(test_dir)
test_num = len(filenames)


# 读入测试集
print("loading and processing bytes data...")

list_name = []
for file in filenames:
    list_name.append(test_dir + file)

data = preprocess(list_name, 2000000)  # 200 0000：表示文件都填充到2MB，或截断为2MB，这里返回data和len(doc)，后面只用data[0]
X = data[0]


print("Bytes processed: %d" % (len(X)))



# Process lables

y = []

with open('/home/mayixuan/drit-7-dataset/drift-labels.csv', 'r') as f:
    reader = csv.reader(f)
    name = [row[0] for row in reader]   # 文件md5或sha_256
    f.close()

with open('/home/mayixuan/drit-7-dataset/drift-labels.csv', 'r') as f:
    reader = csv.reader(f)
    label = [row[1] for row in reader]  # 标签（要与训练时标签相对应）



for file in filenames:
    first_name = os.path.splitext(os.path.basename(file))[0]
    for i in range(len(name)):
        if first_name == name[i]:
            y.append(int(label[i])-1)

print("Test Files label processed: %d" % (len(y)))


# create model
trained_model = load_model('drift-5-fold-result/fold-5-30-epoch.h5')
trained_model.compile(loss='categorical_crossentropy', optimizer=SGD(lr=0.01, momentum=0.9),
                metrics=['accuracy'])
print("Created model and loaded weights from file")
sleep(6)

# estimate accuracy on test dataset using loaded model
y_prob = trained_model.predict(X, verbose=1)  # Testing
y_pred = np.argmax(y_prob, axis=1)


#print(classification_report(y, y_pred, digits=4))
#print(confusion_matrix(y, y_pred))